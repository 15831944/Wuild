diff --git a/include/clang/Driver/CLCompatOptions.td b/include/clang/Driver/CLCompatOptions.td
index e417f6cbbe..458963e07e 100644
--- a/include/clang/Driver/CLCompatOptions.td
+++ b/include/clang/Driver/CLCompatOptions.td
@@ -229,6 +229,9 @@ def _SLASH_FI : CLJoinedOrSeparate<"FI">,
 def _SLASH_Fe : CLJoined<"Fe">,
   HelpText<"Set output executable file or directory (ends in / or \\)">,
   MetaVarName<"<file or directory>">;
+def _SLASH_Fi_colon : CLCompileJoinedOrSeparate<"Fi:">,
+  HelpText<"Set preprocess output file name (with /P)">,
+  MetaVarName<"<file>">;
 def _SLASH_Fi : CLCompileJoined<"Fi">,
   HelpText<"Set preprocess output file name (with /P)">,
   MetaVarName<"<file>">;
diff --git a/lib/Basic/Targets/X86.cpp b/lib/Basic/Targets/X86.cpp
index 8251e6abd6..728ee568de 100644
--- a/lib/Basic/Targets/X86.cpp
+++ b/lib/Basic/Targets/X86.cpp
@@ -1189,7 +1189,7 @@ void X86TargetInfo::getTargetDefines(const LangOptions &Opts,
   case NoMMX3DNow:
     break;
   }
-
+/*
   if (CPU >= CK_i486) {
     Builder.defineMacro("__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1");
     Builder.defineMacro("__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2");
@@ -1197,7 +1197,7 @@ void X86TargetInfo::getTargetDefines(const LangOptions &Opts,
   }
   if (CPU >= CK_i586)
     Builder.defineMacro("__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8");
-
+*/
   if (HasFloat128)
     Builder.defineMacro("__SIZEOF_FLOAT128__", "16");
 }
diff --git a/lib/Driver/Driver.cpp b/lib/Driver/Driver.cpp
index c890f77415..a3e94c40a4 100644
--- a/lib/Driver/Driver.cpp
+++ b/lib/Driver/Driver.cpp
@@ -3157,9 +3157,9 @@ void Driver::BuildJobs(Compilation &C) const {
 
       // In clang-cl, don't mention unknown arguments here since they have
       // already been warned about.
-      if (!IsCLMode() || !A->getOption().matches(options::OPT_UNKNOWN))
-        Diag(clang::diag::warn_drv_unused_argument)
-            << A->getAsString(C.getArgs());
+//      if (!IsCLMode() || !A->getOption().matches(options::OPT_UNKNOWN))
+//        Diag(clang::diag::warn_drv_unused_argument)
+//            << A->getAsString(C.getArgs());
     }
   }
 }
@@ -3791,8 +3791,11 @@ const char *Driver::GetNamedOutputPath(Compilation &C, const JobAction &JA,
     assert(AtTopLevel && isa<PreprocessJobAction>(JA));
     StringRef BaseName = llvm::sys::path::filename(BaseInput);
     StringRef NameArg;
-    if (Arg *A = C.getArgs().getLastArg(options::OPT__SLASH_Fi))
+	if (Arg *A = C.getArgs().getLastArg(options::OPT__SLASH_Fi_colon))
+	  NameArg = A->getValue();
+	else if (Arg *A = C.getArgs().getLastArg(options::OPT__SLASH_Fi))
       NameArg = A->getValue();
+
     return C.addResultFile(
         MakeCLOutputFilename(C.getArgs(), NameArg, BaseName, types::TY_PP_C),
         &JA);
diff --git a/lib/Driver/ToolChains/Clang.cpp b/lib/Driver/ToolChains/Clang.cpp
index a2821b70d7..893089e78c 100644
--- a/lib/Driver/ToolChains/Clang.cpp
+++ b/lib/Driver/ToolChains/Clang.cpp
@@ -4092,7 +4092,7 @@ void Clang::ConstructJob(Compilation &C, const JobAction &JA,
 
   // -fno-use-line-directives is default.
   if (Args.hasFlag(options::OPT_fuse_line_directives,
-                   options::OPT_fno_use_line_directives, false))
+				   options::OPT_fno_use_line_directives, IsWindowsMSVC))
     CmdArgs.push_back("-fuse-line-directives");
 
   // -fms-compatibility=0 is default.
@@ -4108,6 +4108,17 @@ void Clang::ConstructJob(Compilation &C, const JobAction &JA,
     CmdArgs.push_back(
         Args.MakeArgString("-fms-compatibility-version=" + MSVT.getAsString()));
 
+   if (!MSVT.empty())
+   {
+	   CmdArgs.push_back("-Wno-nonportable-include-path");
+	   CmdArgs.push_back("-Wno-expansion-to-defined");
+	   CmdArgs.push_back("-Wno-macro-redefined");
+	   CmdArgs.push_back("-Wno-unused-command-line-argument");
+	   CmdArgs.push_back("-Wno-comment");
+	   CmdArgs.push_back("-Wno-extra-tokens");
+	   CmdArgs.push_back("-Wno-reserved-user-defined-literal");
+   }
+
   bool IsMSVC2015Compatible = MSVT.getMajor() >= 19;
   if (ImplyVCPPCXXVer) {
     StringRef LanguageStandard;
diff --git a/lib/Frontend/InitPreprocessor.cpp b/lib/Frontend/InitPreprocessor.cpp
index 321d963827..fd208d95c8 100644
--- a/lib/Frontend/InitPreprocessor.cpp
+++ b/lib/Frontend/InitPreprocessor.cpp
@@ -484,9 +484,9 @@ static void InitializeCPlusPlusFeatureTestMacros(const LangOptions &LangOpts,
     Builder.defineMacro("__cpp_unicode_literals", "200710");
     Builder.defineMacro("__cpp_user_defined_literals", "200809");
     Builder.defineMacro("__cpp_lambdas", "200907");
-    Builder.defineMacro("__cpp_constexpr",
-                        LangOpts.CPlusPlus17 ? "201603" :
-                        LangOpts.CPlusPlus14 ? "201304" : "200704");
+	Builder.defineMacro("__cpp_constexpr","200704");
+//                        LangOpts.CPlusPlus17 ? "201603" :
+//                        LangOpts.CPlusPlus14 ? "201304" : "200704");
     Builder.defineMacro("__cpp_range_based_for",
                         LangOpts.CPlusPlus17 ? "201603" : "200907");
     Builder.defineMacro("__cpp_static_assert",
@@ -552,6 +552,8 @@ static void InitializePredefinedMacros(const TargetInfo &TI,
                                        const FrontendOptions &FEOpts,
                                        MacroBuilder &Builder) {
   // Compiler version introspection macros.
+	 Builder.defineMacro("__clang_PP__"); // Clang Frontend
+	if (!LangOpts.MSVCCompat) {
   Builder.defineMacro("__llvm__");  // LLVM Backend
   Builder.defineMacro("__clang__"); // Clang Frontend
 #define TOSTR2(X) #X
@@ -564,6 +566,7 @@ static void InitializePredefinedMacros(const TargetInfo &TI,
   Builder.defineMacro("__clang_version__",
                       "\"" CLANG_VERSION_STRING " "
                       + getClangFullRepositoryVersion() + "\"");
+	}
   if (!LangOpts.MSVCCompat) {
     // Currently claim to be compatible with GCC 4.2.1-5621, but only if we're
     // not compiling for MSVC compatibility
@@ -571,6 +574,8 @@ static void InitializePredefinedMacros(const TargetInfo &TI,
     Builder.defineMacro("__GNUC_PATCHLEVEL__", "1");
     Builder.defineMacro("__GNUC__", "4");
     Builder.defineMacro("__GXX_ABI_VERSION", "1002");
+  }else {
+	Builder.defineMacro("L__FUNCTION__", "__LPREFIX(__FUNCTION__)");
   }
 
   // Define macros for the C11 / C++11 memory orderings
diff --git a/lib/Lex/PPMacroExpansion.cpp b/lib/Lex/PPMacroExpansion.cpp
index 41633f90c3..31e645b256 100644
--- a/lib/Lex/PPMacroExpansion.cpp
+++ b/lib/Lex/PPMacroExpansion.cpp
@@ -367,7 +367,7 @@ void Preprocessor::RegisterBuiltinMacros() {
   // Clang Extensions.
   Ident__has_feature      = RegisterBuiltinMacro(*this, "__has_feature");
   Ident__has_extension    = RegisterBuiltinMacro(*this, "__has_extension");
-  Ident__has_builtin      = RegisterBuiltinMacro(*this, "__has_builtin");
+  Ident__has_builtin      = nullptr;//RegisterBuiltinMacro(*this, "__has_builtin");
   Ident__has_attribute    = RegisterBuiltinMacro(*this, "__has_attribute");
   Ident__has_c_attribute  = RegisterBuiltinMacro(*this, "__has_c_attribute");
   Ident__has_declspec = RegisterBuiltinMacro(*this, "__has_declspec_attribute");
